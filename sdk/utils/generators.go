package utils

import (
	"bytes"
	"fmt"
	"go/format"
	"html/template"
	"log/slog"
	"os"
	"strings"

	"github.com/bil0u/galaxy-os/sdk"
	"github.com/disgoorg/disgo/bot"
)

const GeneratorDirective = `//go:generate go run $WORKDIR/cmd/ -generator --config-dir=$WORKDIR`
const GeneratedFileHeader = `
// Code generated by go generate; DO NOT EDIT.
// Instead, run Makefile's "run/generator' or 'generate" targets to update this file.
`

type CodeGenerator interface {
	Name() string
	Setup(client bot.Client, cfg sdk.BotConfig)
	Generate() error
}

var allGenerators = []CodeGenerator{}

func RegisterGenerator(g CodeGenerator) {
	allGenerators = append(allGenerators, g)
}

func RunAllGenerators(client bot.Client, cfg sdk.BotConfig) {
	for _, g := range allGenerators {
		slog.Info(fmt.Sprintf("Running generator '%s'", g.Name()))
		g.Setup(client, cfg)
		err := g.Generate()
		if err != nil {
			slog.Error(fmt.Sprintf("Failed to run generator '%s'. ", g.Name()), slog.Any("err", err))
		} else {
			slog.Info(fmt.Sprintf("Successfully ran generator '%s'", g.Name()))
		}
	}
}

// SourceFileGenerator is a code generator that uses a template to generate code

type SourceFileGenerator struct {
	Client        bot.Client
	Cfg           sdk.BotConfig
	OutputFile    string
	Header        string
	Template      string
	TemplateFuncs template.FuncMap
	GetData       func(g *SourceFileGenerator) any
}

func (g *SourceFileGenerator) Name() string {
	filenameParts := strings.Split(g.OutputFile, "/")
	return filenameParts[len(filenameParts)-1]
}

func (g *SourceFileGenerator) Setup(client bot.Client, cfg sdk.BotConfig) {
	g.Client = client
	g.Cfg = cfg
}

func (g *SourceFileGenerator) Generate() error {

	// Adding header to the template
	g.Template = fmt.Sprintf("%s\n%s", g.Header, g.Template)

	// Create a new template and parse the template string
	tmpl, err := template.New("generator-template").Funcs(g.TemplateFuncs).Parse(g.Template)
	if err != nil {
		return err
	}

	// Execute the template and append it to the buffer
	var buf bytes.Buffer
	if err := tmpl.Execute(&buf, g.GetData(g)); err != nil {
		return fmt.Errorf("failed to execute template: %w", err)
	}

	// Format the source
	formatted, err := format.Source(buf.Bytes())
	if err != nil {
		return fmt.Errorf("failed to format source: %w", err)
	}

	// Write the source to the destination file
	if err := os.WriteFile(g.OutputFile, formatted, 0644); err != nil {
		return fmt.Errorf("failed to write source: %w", err)
	}

	return nil
}
